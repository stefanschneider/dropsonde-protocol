syntax = "proto3";

package events;

option java_package = "org.cloudfoundry.dropsonde.events";
option java_outer_classname = "HttpFactory";
option csharp_namespace = "CloudFoundry.Dropsonde.Events";

import "uuid.proto";

/// Type of peer handling request.
enum PeerType {
    NONE_PEERTYPE = 0;
    Client = 1; /// Request is made by this process.
    Server = 2; /// Request is received by this process.
}

/// HTTP method.
enum Method {
    NONE_METHOD = 0;
    GET = 1;
    POST = 2;
    PUT = 3;
    DELETE = 4;
    HEAD = 5;
}

/// An HttpStart event is emitted when a client sends a request (or immediately when a server receives the request).
message HttpStart {
    int64 timestamp = 1;      /// UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
    UUID requestId = 2;       /// ID for tracking lifecycle of request.
    PeerType peerType = 3;    /// Role of the emitting process in the request cycle.
    Method method = 4;        /// Method of the request.
    string uri = 5;           /// Destination of the request.
    string remoteAddress = 6; /// Remote address of the request. (For a server, this should be the origin of the request.)
    string userAgent = 7;     /// Contents of the UserAgent header on the request.

    UUID parentRequestId = 8; /// If this request was made in order to service an incoming request, this field should track the ID of the parent.
    UUID applicationId = 9;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
    int32 instanceIndex = 10; /// Index of the application instance.
    string instanceId = 11;   /// ID of the application instance.
}

/// An HttpStop event is emitted when a client receives a response to its request (or when a server completes its handling and returns a response).
message HttpStop {
    int64 timestamp = 1;      /// UNIX timestamp (in nanoseconds) when the request was received.
    string uri = 2;           /// URI of request.
    UUID requestId = 3;       /// ID for tracking lifecycle of request. Should match requestId of a HttpStart event.
    PeerType peerType = 4;    /// Role of the emitting process in the request cycle.
    int32 statusCode = 5;     /// Status code returned with the response to the request.
    int64 contentLength = 6;  /// Length of response (bytes).

    UUID applicationId = 7;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
}

/// An HttpStartStop event represents the whole lifecycle of an HTTP request.
message HttpStartStop {
    int64 startTimestamp = 1;  /// UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
    int64 stopTimestamp = 2;   /// UNIX timestamp (in nanoseconds) when the request was received.

    UUID requestId = 3;        /// ID for tracking lifecycle of request. Should match requestId of a HttpStart event.
    PeerType peerType = 4;     /// Role of the emitting process in the request cycle.
    Method method = 5;         /// Method of the request.
    string uri = 6;            /// Destination of the request.
    string remoteAddress = 7;  /// Remote address of the request. (For a server, this should be the origin of the request.)
    string userAgent = 8;      /// Contents of the UserAgent header on the request.

    int32 statusCode = 9;      /// Status code returned with the response to the request.
    int64 contentLength = 10;  /// Length of response (bytes).

    UUID parentRequestId = 11; /// If this request was made in order to service an incoming request, this field should track the ID of the parent.
    UUID applicationId = 12;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
    int32 instanceIndex = 13;  /// Index of the application instance.
    string instanceId = 14;    /// ID of the application instance.
}
