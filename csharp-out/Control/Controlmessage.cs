// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlmessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CloudFoundry.Dropsonde.Control {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Controlmessage {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_control_ControlMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CloudFoundry.Dropsonde.Control.ControlMessage, global::CloudFoundry.Dropsonde.Control.ControlMessage.Builder> internal__static_control_ControlMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static Controlmessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRjb250cm9sbWVzc2FnZS5wcm90bxIHY29udHJvbBoWaGVhcnRiZWF0cmVx", 
            "dWVzdC5wcm90bxoKdXVpZC5wcm90byLqAQoOQ29udHJvbE1lc3NhZ2USDgoG", 
            "b3JpZ2luGAEgAigJEiEKCmlkZW50aWZpZXIYAiACKAsyDS5jb250cm9sLlVV", 
            "SUQSEQoJdGltZXN0YW1wGAMgAigDEjgKC2NvbnRyb2xUeXBlGAQgAigOMiMu", 
            "Y29udHJvbC5Db250cm9sTWVzc2FnZS5Db250cm9sVHlwZRIzChBoZWFydGJl", 
            "YXRSZXF1ZXN0GAUgASgLMhkuY29udHJvbC5IZWFydGJlYXRSZXF1ZXN0IiMK", 
            "C0NvbnRyb2xUeXBlEhQKEEhlYXJ0YmVhdFJlcXVlc3QQAUIhqgIeQ2xvdWRG", 
          "b3VuZHJ5LkRyb3Bzb25kZS5Db250cm9s"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_control_ControlMessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_control_ControlMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CloudFoundry.Dropsonde.Control.ControlMessage, global::CloudFoundry.Dropsonde.Control.ControlMessage.Builder>(internal__static_control_ControlMessage__Descriptor,
                new string[] { "Origin", "Identifier", "Timestamp", "ControlType", "HeartbeatRequest", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::CloudFoundry.Dropsonde.Control.Heartbeatrequest.RegisterAllExtensions(registry);
        global::CloudFoundry.Dropsonde.Control.Uuid.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::CloudFoundry.Dropsonde.Control.Heartbeatrequest.Descriptor, 
          global::CloudFoundry.Dropsonde.Control.Uuid.Descriptor, 
          }, assigner);
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ControlMessage : pb::GeneratedMessage<ControlMessage, ControlMessage.Builder> {
    private ControlMessage() { }
    private static readonly ControlMessage defaultInstance = new ControlMessage().MakeReadOnly();
    private static readonly string[] _controlMessageFieldNames = new string[] { "controlType", "heartbeatRequest", "identifier", "origin", "timestamp" };
    private static readonly uint[] _controlMessageFieldTags = new uint[] { 32, 42, 18, 10, 24 };
    public static ControlMessage DefaultInstance {
      get { return defaultInstance; }
    }

    public override ControlMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ControlMessage ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::CloudFoundry.Dropsonde.Control.Controlmessage.internal__static_control_ControlMessage__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ControlMessage, ControlMessage.Builder> InternalFieldAccessors {
      get { return global::CloudFoundry.Dropsonde.Control.Controlmessage.internal__static_control_ControlMessage__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ControlType {
        HeartbeatRequest = 1,
      }

    }
    #endregion

    public const int OriginFieldNumber = 1;
    private bool hasOrigin;
    private string origin_ = "";
    public bool HasOrigin {
      get { return hasOrigin; }
    }
    public string Origin {
      get { return origin_; }
    }

    public const int IdentifierFieldNumber = 2;
    private bool hasIdentifier;
    private global::CloudFoundry.Dropsonde.Control.UUID identifier_;
    public bool HasIdentifier {
      get { return hasIdentifier; }
    }
    public global::CloudFoundry.Dropsonde.Control.UUID Identifier {
      get { return identifier_ ?? global::CloudFoundry.Dropsonde.Control.UUID.DefaultInstance; }
    }

    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }

    public const int ControlTypeFieldNumber = 4;
    private bool hasControlType;
    private global::CloudFoundry.Dropsonde.Control.ControlMessage.Types.ControlType controlType_ = global::CloudFoundry.Dropsonde.Control.ControlMessage.Types.ControlType.HeartbeatRequest;
    public bool HasControlType {
      get { return hasControlType; }
    }
    public global::CloudFoundry.Dropsonde.Control.ControlMessage.Types.ControlType ControlType {
      get { return controlType_; }
    }

    public const int HeartbeatRequestFieldNumber = 5;
    private bool hasHeartbeatRequest;
    private global::CloudFoundry.Dropsonde.Control.HeartbeatRequest heartbeatRequest_;
    public bool HasHeartbeatRequest {
      get { return hasHeartbeatRequest; }
    }
    public global::CloudFoundry.Dropsonde.Control.HeartbeatRequest HeartbeatRequest {
      get { return heartbeatRequest_ ?? global::CloudFoundry.Dropsonde.Control.HeartbeatRequest.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasOrigin) return false;
        if (!hasIdentifier) return false;
        if (!hasTimestamp) return false;
        if (!hasControlType) return false;
        if (!Identifier.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _controlMessageFieldNames;
      if (hasOrigin) {
        output.WriteString(1, field_names[3], Origin);
      }
      if (hasIdentifier) {
        output.WriteMessage(2, field_names[2], Identifier);
      }
      if (hasTimestamp) {
        output.WriteInt64(3, field_names[4], Timestamp);
      }
      if (hasControlType) {
        output.WriteEnum(4, field_names[0], (int) ControlType, ControlType);
      }
      if (hasHeartbeatRequest) {
        output.WriteMessage(5, field_names[1], HeartbeatRequest);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasOrigin) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Origin);
      }
      if (hasIdentifier) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Identifier);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Timestamp);
      }
      if (hasControlType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) ControlType);
      }
      if (hasHeartbeatRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, HeartbeatRequest);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ControlMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ControlMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ControlMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ControlMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ControlMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ControlMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ControlMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ControlMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ControlMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ControlMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ControlMessage MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ControlMessage prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ControlMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ControlMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ControlMessage result;

      private ControlMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ControlMessage original = result;
          result = new ControlMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override ControlMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CloudFoundry.Dropsonde.Control.ControlMessage.Descriptor; }
      }

      public override ControlMessage DefaultInstanceForType {
        get { return global::CloudFoundry.Dropsonde.Control.ControlMessage.DefaultInstance; }
      }

      public override ControlMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ControlMessage) {
          return MergeFrom((ControlMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ControlMessage other) {
        if (other == global::CloudFoundry.Dropsonde.Control.ControlMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOrigin) {
          Origin = other.Origin;
        }
        if (other.HasIdentifier) {
          MergeIdentifier(other.Identifier);
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasControlType) {
          ControlType = other.ControlType;
        }
        if (other.HasHeartbeatRequest) {
          MergeHeartbeatRequest(other.HeartbeatRequest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_controlMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _controlMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasOrigin = input.ReadString(ref result.origin_);
              break;
            }
            case 18: {
              global::CloudFoundry.Dropsonde.Control.UUID.Builder subBuilder = global::CloudFoundry.Dropsonde.Control.UUID.CreateBuilder();
              if (result.hasIdentifier) {
                subBuilder.MergeFrom(Identifier);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identifier = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.controlType_, out unknown)) {
                result.hasControlType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42: {
              global::CloudFoundry.Dropsonde.Control.HeartbeatRequest.Builder subBuilder = global::CloudFoundry.Dropsonde.Control.HeartbeatRequest.CreateBuilder();
              if (result.hasHeartbeatRequest) {
                subBuilder.MergeFrom(HeartbeatRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeartbeatRequest = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasOrigin {
        get { return result.hasOrigin; }
      }
      public string Origin {
        get { return result.Origin; }
        set { SetOrigin(value); }
      }
      public Builder SetOrigin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrigin = true;
        result.origin_ = value;
        return this;
      }
      public Builder ClearOrigin() {
        PrepareBuilder();
        result.hasOrigin = false;
        result.origin_ = "";
        return this;
      }

      public bool HasIdentifier {
       get { return result.hasIdentifier; }
      }
      public global::CloudFoundry.Dropsonde.Control.UUID Identifier {
        get { return result.Identifier; }
        set { SetIdentifier(value); }
      }
      public Builder SetIdentifier(global::CloudFoundry.Dropsonde.Control.UUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentifier = true;
        result.identifier_ = value;
        return this;
      }
      public Builder SetIdentifier(global::CloudFoundry.Dropsonde.Control.UUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentifier = true;
        result.identifier_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentifier(global::CloudFoundry.Dropsonde.Control.UUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentifier &&
            result.identifier_ != global::CloudFoundry.Dropsonde.Control.UUID.DefaultInstance) {
            result.identifier_ = global::CloudFoundry.Dropsonde.Control.UUID.CreateBuilder(result.identifier_).MergeFrom(value).BuildPartial();
        } else {
          result.identifier_ = value;
        }
        result.hasIdentifier = true;
        return this;
      }
      public Builder ClearIdentifier() {
        PrepareBuilder();
        result.hasIdentifier = false;
        result.identifier_ = null;
        return this;
      }

      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }

      public bool HasControlType {
        get { return result.hasControlType; }
      }
      public global::CloudFoundry.Dropsonde.Control.ControlMessage.Types.ControlType ControlType {
        get { return result.ControlType; }
        set { SetControlType(value); }
      }
      public Builder SetControlType(global::CloudFoundry.Dropsonde.Control.ControlMessage.Types.ControlType value) {
        PrepareBuilder();
        result.hasControlType = true;
        result.controlType_ = value;
        return this;
      }
      public Builder ClearControlType() {
        PrepareBuilder();
        result.hasControlType = false;
        result.controlType_ = global::CloudFoundry.Dropsonde.Control.ControlMessage.Types.ControlType.HeartbeatRequest;
        return this;
      }

      public bool HasHeartbeatRequest {
       get { return result.hasHeartbeatRequest; }
      }
      public global::CloudFoundry.Dropsonde.Control.HeartbeatRequest HeartbeatRequest {
        get { return result.HeartbeatRequest; }
        set { SetHeartbeatRequest(value); }
      }
      public Builder SetHeartbeatRequest(global::CloudFoundry.Dropsonde.Control.HeartbeatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeartbeatRequest = true;
        result.heartbeatRequest_ = value;
        return this;
      }
      public Builder SetHeartbeatRequest(global::CloudFoundry.Dropsonde.Control.HeartbeatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeartbeatRequest = true;
        result.heartbeatRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeartbeatRequest(global::CloudFoundry.Dropsonde.Control.HeartbeatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeartbeatRequest &&
            result.heartbeatRequest_ != global::CloudFoundry.Dropsonde.Control.HeartbeatRequest.DefaultInstance) {
            result.heartbeatRequest_ = global::CloudFoundry.Dropsonde.Control.HeartbeatRequest.CreateBuilder(result.heartbeatRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.heartbeatRequest_ = value;
        }
        result.hasHeartbeatRequest = true;
        return this;
      }
      public Builder ClearHeartbeatRequest() {
        PrepareBuilder();
        result.hasHeartbeatRequest = false;
        result.heartbeatRequest_ = null;
        return this;
      }
    }
    static ControlMessage() {
      object.ReferenceEquals(global::CloudFoundry.Dropsonde.Control.Controlmessage.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
