// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CloudFoundry.Dropsonde.Events {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Metric {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Metric() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxtZXRyaWMucHJvdG8SBmV2ZW50cxoKdXVpZC5wcm90byI4CgtWYWx1ZU1l", 
            "dHJpYxIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgBEgwKBHVuaXQYAyAB", 
            "KAkiOgoMQ291bnRlckV2ZW50EgwKBG5hbWUYASABKAkSDQoFZGVsdGEYAiAB", 
            "KAQSDQoFdG90YWwYAyABKAQifgoPQ29udGFpbmVyTWV0cmljEhUKDWFwcGxp", 
            "Y2F0aW9uSWQYASABKAkSFQoNaW5zdGFuY2VJbmRleBgCIAEoBRIVCg1jcHVQ", 
            "ZXJjZW50YWdlGAMgASgBEhMKC21lbW9yeUJ5dGVzGAQgASgEEhEKCWRpc2tC", 
            "eXRlcxgFIAEoBEJSCiFvcmcuY2xvdWRmb3VuZHJ5LmRyb3Bzb25kZS5ldmVu", 
            "dHNCDU1ldHJpY0ZhY3RvcnmqAh1DbG91ZEZvdW5kcnkuRHJvcHNvbmRlLkV2", 
            "ZW50c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { global::CloudFoundry.Dropsonde.Events.Uuid.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::CloudFoundry.Dropsonde.Events.ValueMetric), new[]{ "Name", "Value", "Unit" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::CloudFoundry.Dropsonde.Events.CounterEvent), new[]{ "Name", "Delta", "Total" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::CloudFoundry.Dropsonde.Events.ContainerMetric), new[]{ "ApplicationId", "InstanceIndex", "CpuPercentage", "MemoryBytes", "DiskBytes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ValueMetric : pb::IMessage<ValueMetric> {
    private static readonly pb::MessageParser<ValueMetric> _parser = new pb::MessageParser<ValueMetric>(() => new ValueMetric());
    public static pb::MessageParser<ValueMetric> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::CloudFoundry.Dropsonde.Events.Metric.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ValueMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ValueMetric(ValueMetric other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      unit_ = other.unit_;
    }

    public ValueMetric Clone() {
      return new ValueMetric(this);
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ValueFieldNumber = 2;
    private double value_;
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public const int UnitFieldNumber = 3;
    private string unit_ = "";
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ValueMetric);
    }

    public bool Equals(ValueMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (Unit != other.Unit) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Unit);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      return size;
    }

    public void MergeFrom(ValueMetric other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 26: {
            Unit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CounterEvent : pb::IMessage<CounterEvent> {
    private static readonly pb::MessageParser<CounterEvent> _parser = new pb::MessageParser<CounterEvent>(() => new CounterEvent());
    public static pb::MessageParser<CounterEvent> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::CloudFoundry.Dropsonde.Events.Metric.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CounterEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CounterEvent(CounterEvent other) : this() {
      name_ = other.name_;
      delta_ = other.delta_;
      total_ = other.total_;
    }

    public CounterEvent Clone() {
      return new CounterEvent(this);
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DeltaFieldNumber = 2;
    private ulong delta_;
    public ulong Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    public const int TotalFieldNumber = 3;
    private ulong total_;
    public ulong Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CounterEvent);
    }

    public bool Equals(CounterEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Delta != other.Delta) return false;
      if (Total != other.Total) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Delta != 0UL) hash ^= Delta.GetHashCode();
      if (Total != 0UL) hash ^= Total.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Delta != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Delta);
      }
      if (Total != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Total);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Delta != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Delta);
      }
      if (Total != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Total);
      }
      return size;
    }

    public void MergeFrom(CounterEvent other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Delta != 0UL) {
        Delta = other.Delta;
      }
      if (other.Total != 0UL) {
        Total = other.Total;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Delta = input.ReadUInt64();
            break;
          }
          case 24: {
            Total = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ContainerMetric : pb::IMessage<ContainerMetric> {
    private static readonly pb::MessageParser<ContainerMetric> _parser = new pb::MessageParser<ContainerMetric>(() => new ContainerMetric());
    public static pb::MessageParser<ContainerMetric> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::CloudFoundry.Dropsonde.Events.Metric.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ContainerMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ContainerMetric(ContainerMetric other) : this() {
      applicationId_ = other.applicationId_;
      instanceIndex_ = other.instanceIndex_;
      cpuPercentage_ = other.cpuPercentage_;
      memoryBytes_ = other.memoryBytes_;
      diskBytes_ = other.diskBytes_;
    }

    public ContainerMetric Clone() {
      return new ContainerMetric(this);
    }

    public const int ApplicationIdFieldNumber = 1;
    private string applicationId_ = "";
    public string ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int InstanceIndexFieldNumber = 2;
    private int instanceIndex_;
    public int InstanceIndex {
      get { return instanceIndex_; }
      set {
        instanceIndex_ = value;
      }
    }

    public const int CpuPercentageFieldNumber = 3;
    private double cpuPercentage_;
    public double CpuPercentage {
      get { return cpuPercentage_; }
      set {
        cpuPercentage_ = value;
      }
    }

    public const int MemoryBytesFieldNumber = 4;
    private ulong memoryBytes_;
    public ulong MemoryBytes {
      get { return memoryBytes_; }
      set {
        memoryBytes_ = value;
      }
    }

    public const int DiskBytesFieldNumber = 5;
    private ulong diskBytes_;
    public ulong DiskBytes {
      get { return diskBytes_; }
      set {
        diskBytes_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ContainerMetric);
    }

    public bool Equals(ContainerMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      if (InstanceIndex != other.InstanceIndex) return false;
      if (CpuPercentage != other.CpuPercentage) return false;
      if (MemoryBytes != other.MemoryBytes) return false;
      if (DiskBytes != other.DiskBytes) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      if (InstanceIndex != 0) hash ^= InstanceIndex.GetHashCode();
      if (CpuPercentage != 0D) hash ^= CpuPercentage.GetHashCode();
      if (MemoryBytes != 0UL) hash ^= MemoryBytes.GetHashCode();
      if (DiskBytes != 0UL) hash ^= DiskBytes.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ApplicationId);
      }
      if (InstanceIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InstanceIndex);
      }
      if (CpuPercentage != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CpuPercentage);
      }
      if (MemoryBytes != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MemoryBytes);
      }
      if (DiskBytes != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(DiskBytes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApplicationId);
      }
      if (InstanceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceIndex);
      }
      if (CpuPercentage != 0D) {
        size += 1 + 8;
      }
      if (MemoryBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryBytes);
      }
      if (DiskBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DiskBytes);
      }
      return size;
    }

    public void MergeFrom(ContainerMetric other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.InstanceIndex != 0) {
        InstanceIndex = other.InstanceIndex;
      }
      if (other.CpuPercentage != 0D) {
        CpuPercentage = other.CpuPercentage;
      }
      if (other.MemoryBytes != 0UL) {
        MemoryBytes = other.MemoryBytes;
      }
      if (other.DiskBytes != 0UL) {
        DiskBytes = other.DiskBytes;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ApplicationId = input.ReadString();
            break;
          }
          case 16: {
            InstanceIndex = input.ReadInt32();
            break;
          }
          case 25: {
            CpuPercentage = input.ReadDouble();
            break;
          }
          case 32: {
            MemoryBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            DiskBytes = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
